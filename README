🚨 NetPulse — Système de Surveillance Réseau en Temps Réel

NetPulse est une application full-stack conçue pour surveiller, 
analyser et visualiser en temps réel l'état d'un réseau informatique. 
Ce projet combine un backend NestJS (TypeScript) et un frontend React (CoreUI) 
dans une architecture modulaire et maintenable.

📁 Structure du projet
```
netpulse/
├── backend/               # API REST + WebSocket + collecte réseau (NestJS)
│   ├── src/
│   │   ├── modules/
│   │   │   ├── agents/    # Agents de surveillance réseau
│   │   │   ├── auth/      # Authentification JWT
│   │   │   ├── network/   # Services réseau (nmap, traceroute, etc.)
│   │   │   ├── surveillance/ # Alertes et seuils
│   │   │   └── logs/      # Gestion des logs
│   │   ├── config/        # Configuration de l'application
│   │   └── utils/         # Utilitaires
│   ├── dockerfile
│   ├── package.json
│   └── tsconfig.json
├── front/                 # Interface utilisateur React (CoreUI)
│   ├── src/
│   │   ├── components/    # Composants réutilisables
│   │   ├── views/         # Pages de l'application
│   │   ├── services/      # Services API
│   │   └── hooks/         # Hooks personnalisés
│   ├── public/
│   ├── package.json
│   └── vite.config.mjs
├── mysql/                 # Configuration et migrations MySQL
│   ├── conf.d/
│   ├── init/
│   └── migrations/
├── docker-compose.yml     # Conteneurisation (MySQL + phpMyAdmin)
├── package.json           # Scripts de développement
└── README                 # Ce fichier
```

⚙️ Installation (en local)

1. **Cloner le projet**
```bash
git clone https://github.com/Juntegs/netpulse.git
cd netpulse
```

2. **Configurer l'environnement**
```bash
# Créer le fichier .env à la racine
cp .env.example .env
# Configurer les variables d'environnement (MySQL, JWT, etc.)
```

3. **Lancer la base de données**
```bash
docker-compose up -d mysql phpmyadmin
```

4. **Installer et lancer le backend**
```bash
cd backend
npm install
npm run start:dev
```

5. **Installer et lancer le frontend**
```bash
cd ../front
npm install
npm start
```

6. **Scripts utiles à la racine**
```bash
npm run dev           # Lance frontend + backend en parallèle
npm run dev:frontend  # Lance seulement le frontend
npm run dev:backend   # Lance seulement le backend
npm run build         # Build production frontend + backend
```

🧪 Tests de base après installation

- **Frontend** : Accédez à http://localhost:3000
- **Backend API** : http://localhost:3001
- **phpMyAdmin** : http://localhost:8080

Vérifiez que :
- Les composants graphiques affichent les données simulées
- La communication en temps réel fonctionne via WebSocket
- Les métriques apparaissent dans les graphiques
- Les alertes se déclenchent lors du dépassement de seuils

🐳 Docker

**Lancement complet via Docker Compose**
```bash
docker-compose up --build
```

Cela va lancer :
- MySQL sur `localhost:3306`
- phpMyAdmin sur `http://localhost:8080`
- Le backend NestJS sur `http://localhost:3001`
- Le frontend React sur `http://localhost:3000`

🌐 Technologies

**Backend (NestJS)**
- NestJS + TypeScript
- Socket.IO pour la communication temps réel
- MySQL avec Sequelize ORM
- JWT pour l'authentification
- Modules : agents, auth, network, surveillance, logs

**Frontend (React)**
- React 19 + Vite
- CoreUI 5 (interface admin)
- Chart.js + react-chartjs-2
- Axios pour les requêtes API
- Socket.IO client

**Base de données**
- MySQL 8.0
- phpMyAdmin pour la gestion

📊 Fonctionnalités principales

🔴 **Surveillance réseau en temps réel**
- Détection automatique des appareils connectés
- Monitoring des métriques réseau (trafic, latence, etc.)
- Agents spécialisés (nmap, traceroute, netstat)

📉 **Visualisation graphique dynamique**
- Tableaux de bord interactifs
- Graphiques en temps réel
- Topologie réseau

⚠️ **Système d'alertes**
- Seuils configurables
- Détection d'anomalies
- Notifications en temps réel

🔒 **Authentification sécurisée**
- JWT tokens
- Gestion des utilisateurs
- Rôles et permissions

📡 **Agents de surveillance**
- Nmap pour la découverte réseau
- Traceroute pour l'analyse des routes
- Netstat pour les connexions actives
- Détection d'anomalies

🧑‍💻 Démo de soutenance

**Scénario de test recommandé :**
1. Simulation de trafic réseau (ping, iperf, etc.)
2. Déclenchement d'une alerte et visualisation côté frontend
3. Présentation des modules techniques (agents, surveillance, etc.)
4. Démonstration de la détection d'appareils en temps réel

**Support de présentation :**
- Slides techniques (architecture, modules)
- Maquettes UI/UX (Figma)
- Documentation API (Postman)


✅ **Fonctionnalités implémentées**

✅ Authentification JWT sécurisée
✅ Dashboard admin avec CoreUI
✅ Modules modulaires (agents, network, surveillance)
✅ Base de données MySQL avec migrations
✅ Communication WebSocket temps réel
✅ Agents de surveillance réseau (nmap, traceroute, netstat)
✅ Système d'alertes et seuils
✅ Interface utilisateur moderne et responsive

🔄 **À améliorer**

- Intégration CI/CD GitHub Actions
- Export CSV/PDF des métriques
- Tests unitaires et d'intégration
- Documentation API complète
- Monitoring des performances