# =====================================================
# SCRIPT D'INSTALLATION MVP STATS - Outils de Collecte
# Date: 2025-01-27
# Description: Installation des outils requis pour la collecte de statistiques
# =====================================================

Write-Host "=====================================================" -ForegroundColor Cyan
Write-Host "INSTALLATION DES OUTILS MVP STATS" -ForegroundColor Cyan
Write-Host "=====================================================" -ForegroundColor Cyan

# =====================================================
# √âTAPE 1: V√âRIFICATION DES PR√âREQUIS
# =====================================================

Write-Host "`n[1/6] V√©rification des pr√©requis..." -ForegroundColor Yellow

# V√©rifier PowerShell version
$psVersion = $PSVersionTable.PSVersion
Write-Host "PowerShell Version: $psVersion" -ForegroundColor Green

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Host "Node.js Version: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js non trouv√©. Veuillez installer Node.js depuis https://nodejs.org/" -ForegroundColor Red
    exit 1
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Host "npm Version: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm non trouv√©. Veuillez installer npm." -ForegroundColor Red
    exit 1
}

# V√©rifier Git
try {
    $gitVersion = git --version
    Write-Host "Git Version: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Git non trouv√©. Recommand√© pour le versioning." -ForegroundColor Yellow
}

# =====================================================
# √âTAPE 2: V√âRIFICATION DES OUTILS NATIFS WINDOWS
# =====================================================

Write-Host "`n[2/6] V√©rification des outils Windows natifs..." -ForegroundColor Yellow

# V√©rifier Ping
try {
    ping -n 1 127.0.0.1 | Out-Null
    Write-Host "‚úÖ Ping: Disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Ping: Non disponible" -ForegroundColor Red
}

# V√©rifier PowerShell cmdlets
try {
    Get-NetAdapter | Out-Null
    Write-Host "‚úÖ Get-NetAdapter: Disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Get-NetAdapter: Non disponible" -ForegroundColor Red
}

try {
    Get-Counter | Out-Null
    Write-Host "‚úÖ Get-Counter: Disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Get-Counter: Non disponible" -ForegroundColor Red
}

try {
    Get-WmiObject -Class Win32_Processor | Out-Null
    Write-Host "‚úÖ Get-WmiObject: Disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Get-WmiObject: Non disponible" -ForegroundColor Red
}

# =====================================================
# √âTAPE 3: INSTALLATION DE CHOCOLATEY (SI N√âCESSAIRE)
# =====================================================

Write-Host "`n[3/6] V√©rification de Chocolatey..." -ForegroundColor Yellow

try {
    choco --version | Out-Null
    Write-Host "‚úÖ Chocolatey: D√©j√† install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Chocolatey: Installation en cours..." -ForegroundColor Yellow
    
    $installChoco = Read-Host "Installer Chocolatey ? (y/n)"
    if ($installChoco -eq 'y' -or $installChoco -eq 'Y') {
        Write-Host "Installation de Chocolatey..." -ForegroundColor Cyan
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "‚úÖ Chocolatey: Install√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Chocolatey: Installation ignor√©e. Les outils tiers devront √™tre install√©s manuellement." -ForegroundColor Yellow
    }
}

# =====================================================
# √âTAPE 4: INSTALLATION DES OUTILS TIERS
# =====================================================

Write-Host "`n[4/6] Installation des outils tiers..." -ForegroundColor Yellow

# Fonction pour installer un outil
function Install-Tool {
    param(
        [string]$ToolName,
        [string]$ChocoPackage,
        [string]$ManualUrl,
        [string]$TestCommand
    )
    
    Write-Host "V√©rification de $ToolName..." -ForegroundColor Cyan
    
    try {
        & $TestCommand | Out-Null
        Write-Host "‚úÖ $ToolName: D√©j√† install√©" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå $ToolName: Non trouv√©" -ForegroundColor Red
        
        $installTool = Read-Host "Installer $ToolName ? (y/n)"
        if ($installTool -eq 'y' -or $installTool -eq 'Y') {
            try {
                choco install $ChocoPackage -y
                Write-Host "‚úÖ $ToolName: Install√© avec succ√®s" -ForegroundColor Green
                return $true
            } catch {
                Write-Host "‚ùå √âchec de l'installation automatique de $ToolName" -ForegroundColor Red
                Write-Host "üì• Installation manuelle: $ManualUrl" -ForegroundColor Yellow
                return $false
            }
        } else {
            Write-Host "‚ö†Ô∏è $ToolName: Installation ignor√©e" -ForegroundColor Yellow
            return $false
        }
    }
}

# Installation des outils
$tools = @(
    @{
        Name = "Iperf3"
        ChocoPackage = "iperf3"
        ManualUrl = "https://iperf.fr/iperf-download.php"
        TestCommand = "iperf3"
    },
    @{
        Name = "Nmap"
        ChocoPackage = "nmap"
        ManualUrl = "https://nmap.org/download.html"
        TestCommand = "nmap"
    },
    @{
        Name = "SNMP Tools"
        ChocoPackage = "snmp-tools"
        ManualUrl = "Activer les fonctionnalit√©s SNMP dans Windows"
        TestCommand = "snmpget"
    }
)

$installedTools = @()
foreach ($tool in $tools) {
    if (Install-Tool -ToolName $tool.Name -ChocoPackage $tool.ChocoPackage -ManualUrl $tool.ManualUrl -TestCommand $tool.TestCommand) {
        $installedTools += $tool.Name
    }
}

# =====================================================
# √âTAPE 5: CONFIGURATION DES VARIABLES D'ENVIRONNEMENT
# =====================================================

Write-Host "`n[5/6] Configuration des variables d'environnement..." -ForegroundColor Yellow

# Ajouter les outils au PATH si n√©cessaire
$toolsPaths = @(
    "C:\iperf3",
    "C:\Program Files (x86)\Nmap",
    "C:\Program Files\Nmap"
)

$currentPath = [Environment]::GetEnvironmentVariable("PATH", "User")
$pathUpdated = $false

foreach ($path in $toolsPaths) {
    if (Test-Path $path) {
        if ($currentPath -notlike "*$path*") {
            $currentPath += ";$path"
            $pathUpdated = $true
            Write-Host "‚úÖ Ajout√© au PATH: $path" -ForegroundColor Green
        }
    }
}

if ($pathUpdated) {
    [Environment]::SetEnvironmentVariable("PATH", $currentPath, "User")
    Write-Host "‚úÖ Variables d'environnement mises √† jour" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è Red√©marrez votre terminal pour que les changements prennent effet" -ForegroundColor Yellow
}

# =====================================================
# √âTAPE 6: INSTALLATION DES D√âPENDANCES NODE.JS
# =====================================================

Write-Host "`n[6/6] Installation des d√©pendances Node.js..." -ForegroundColor Yellow

# V√©rifier si on est dans le bon r√©pertoire
if (Test-Path "backend\package.json") {
    Write-Host "Installation des d√©pendances backend..." -ForegroundColor Cyan
    Set-Location backend
    npm install
    
    # Installation des d√©pendances sp√©cifiques MVP
    Write-Host "Installation des d√©pendances MVP..." -ForegroundColor Cyan
    npm install axios uuid moment winston
    npm install --save-dev @types/node @types/uuid
    
    Write-Host "‚úÖ D√©pendances Node.js install√©es" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è R√©pertoire backend non trouv√©. Veuillez ex√©cuter ce script depuis la racine du projet." -ForegroundColor Yellow
}

# =====================================================
# R√âSUM√â DE L'INSTALLATION
# =====================================================

Write-Host "`n=====================================================" -ForegroundColor Cyan
Write-Host "R√âSUM√â DE L'INSTALLATION" -ForegroundColor Cyan
Write-Host "=====================================================" -ForegroundColor Cyan

Write-Host "`n‚úÖ Outils natifs Windows:" -ForegroundColor Green
Write-Host "   - PowerShell (v$psVersion)"
Write-Host "   - Ping"
Write-Host "   - Get-NetAdapter"
Write-Host "   - Get-Counter"
Write-Host "   - Get-WmiObject"

Write-Host "`n‚úÖ Outils tiers install√©s:" -ForegroundColor Green
foreach ($tool in $installedTools) {
    Write-Host "   - $tool"
}

if ($installedTools.Count -eq 0) {
    Write-Host "   - Aucun outil tiers install√©" -ForegroundColor Yellow
}

Write-Host "`n‚úÖ D√©pendances Node.js:" -ForegroundColor Green
Write-Host "   - axios (requ√™tes HTTP)"
Write-Host "   - uuid (g√©n√©ration d'identifiants)"
Write-Host "   - moment (gestion des dates)"
Write-Host "   - winston (logging)"

Write-Host "`nüìã PROCHAINES √âTAPES:" -ForegroundColor Cyan
Write-Host "1. Red√©marrez votre terminal pour les variables d'environnement"
Write-Host "2. Ex√©cutez la migration SQL: mysql/migrations/mvp_stats_schema_update.sql"
Write-Host "3. D√©marrez le backend: npm run start:dev"
Write-Host "4. Testez la collecte via l'interface web"

Write-Host "`nüéâ Installation termin√©e avec succ√®s!" -ForegroundColor Green
Write-Host "=====================================================" -ForegroundColor Cyan 